#include <stdio.h>
#include <stdlib.h>

// Define a structure for a node in the circular linked list
struct Node {
    int data;
    struct Node* next;
};

// Function prototypes
struct Node* createNode(int data);
struct Node* insertAtBeginning(struct Node* head, int data);
struct Node* insertAtEnd(struct Node* head, int data);
struct Node* insertAfterNode(struct Node* head, int key, int data);
struct Node* deleteFromBeginning(struct Node* head);
struct Node* deleteFromEnd(struct Node* head);
struct Node* deleteAfterNode(struct Node* head, int key);
void display(struct Node* head);
void deleteList(struct Node** head);

int main() {
    struct Node* head = NULL;
    int choice, data, key;

    do {
        printf("\nCircular Linked List Operations:\n");
        printf("1. Create a circular linked list\n");
        printf("2. Display elements\n");
        printf("3. Insert at the beginning\n");
        printf("4. Insert at the end\n");
        printf("5. Insert after a given node\n");
        printf("6. Delete from the beginning\n");
        printf("7. Delete from the end\n");
        printf("8. Delete after a given node\n");
        printf("9. Delete entire linked list\n");
        printf("0. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                // Create a circular linked list
                printf("Enter the data for the first node: ");
                scanf("%d", &data);
                head = createNode(data);
                break;

            case 2:
                // Display elements
                display(head);
                break;

            case 3:
                // Insert at the beginning
                printf("Enter data to insert at the beginning: ");
                scanf("%d", &data);
                head = insertAtBeginning(head, data);
                break;

            case 4:
                // Insert at the end
                printf("Enter data to insert at the end: ");
                scanf("%d", &data);
                head = insertAtEnd(head, data);
                break;

            case 5:
                // Insert after a given node
                printf("Enter the key value: ");
                scanf("%d", &key);
                printf("Enter data to insert after the key: ");
                scanf("%d", &data);
                head = insertAfterNode(head, key, data);
                break;

            case 6:
                // Delete from the beginning
                head = deleteFromBeginning(head);
                break;

            case 7:
                // Delete from the end
                head = deleteFromEnd(head);
                break;

            case 8:
                // Delete after a given node
                printf("Enter the key value: ");
                scanf("%d", &key);
                head = deleteAfterNode(head, key);
                break;

            case 9:
                // Delete entire linked list
                deleteList(&head);
                printf("Circular linked list deleted.\n");
                break;

            case 0:
                // Exit
                printf("Exiting the program. Goodbye!\n");
                break;

            default:
                printf("Invalid choice. Please enter a valid option.\n");
        }
    } while (choice != 0);

    return 0;
}

// Function to create a new node
struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = newNode; // Point to itself as it is the only node in the circular list
    return newNode;
}

// Function to insert a node at the beginning of the circular linked list
struct Node* insertAtBeginning(struct Node* head, int data) {
    struct Node* newNode = createNode(data);
    if (head == NULL) {
        // If the list is empty, make the new node as the head
        head = newNode;
    } else {
        // Otherwise, insert at the beginning
        newNode->next = head;
        struct Node* last = head;
        while (last->next != head) {
            last = last->next;
        }
        last->next = newNode; // Update the last node's next to the new node
        head = newNode; // Update the head
    }
    printf("Node inserted at the beginning.\n");
    return head;
}

// Function to insert a node at the end of the circular linked list
struct Node* insertAtEnd(struct Node* head, int data) {
    struct Node* newNode = createNode(data);
    if (head == NULL) {
        // If the list is empty, make the new node as the head
        head = newNode;
    } else {
        // Otherwise, insert at the end
        struct Node* last = head;
        while (last->next != head) {
            last = last->next;
        }
        last->next = newNode; // Update the last node's next to the new node
        newNode->next = head; // Update the new node's next to the head
    }
    printf("Node inserted at the end.\n");
    return head;
}

// Function to insert a node after a given node in the circular linked list
struct Node* insertAfterNode(struct Node* head, int key, int data) {
    if (head == NULL) {
        printf("Circular linked list is empty. Cannot insert after a given node.\n");
    } else {
        struct Node* current = head;
        do {
            if (current->data == key) {
                // Found the key, insert after this node
                struct Node* newNode = createNode(data);
                newNode->next = current->next;
                current->next = newNode;
                printf("Node inserted after the given key.\n");
                return head;
            }
            current = current->next;
        } while (current != head);
        // Key not found
        printf("Key not found in the circular linked list.\n");
    }
    return head;
}

// Function to delete a node from the beginning of the circular linked list
struct Node* deleteFromBeginning(struct Node* head) {
    if (head == NULL) {
        printf("Circular linked list is empty. Nothing to delete.\n");
    } else {
        struct Node* temp = head;
        struct Node* last = head;
        while (last->next != head) {
            last = last->next;
        }
        if (head == head->next) {
            // If there is only one node in the list
            free(head);
            head = NULL;
        } else {
            head = head->next; // Move head to the next node
            last->next = head; // Update the last node's next to the new head
            free(temp); // Free the old head
            printf("Node deleted from the beginning.\n");
        }
    }
    return head;
}

// Function to delete a node from the end of the circular linked list
struct Node* deleteFromEnd(struct Node* head) {
    if (head == NULL) {
        printf("Circular linked list is empty. Nothing to delete.\n");
    } else {
        struct Node* temp = head;
        struct Node* last = head;
        struct Node* secondLast = NULL;
        while (last->next != head) {
            secondLast = last;
            last = last->next;
        }
        if (head == head->next) {
            // If there is only one node in the list
            free(head);
            head = NULL;
        } else {
            secondLast->next = head; // Update the second last node's next to the head
            free(last); // Free the last node
            printf("Node deleted from the end.\n");
        }
    }
    return head;
}

// Function to delete a node after a given node in the circular linked list
struct Node* deleteAfterNode(struct Node* head, int key) {
    if (head == NULL) {
        printf("Circular linked list is empty. Nothing to delete.\n");
    } else {
        struct Node* current = head;
        struct Node* nextNode = head->next;
        while (current->data != key) {
            current = current->next;
            nextNode = nextNode->next;
        }
        if (current->next == head) {
            printf("No node found after the given key.\n");
        } else {
            current->next = nextNode->next; // Update the current node's next
            free(nextNode); // Free the deleted node
            printf("Node deleted after the given key.\n");
        }
    }
    return head;
}

// Function to display the elements of the circular linked list
void display(struct Node* head) {
    if (head == NULL) {
        printf("Circular linked list is empty.\n");
    } else {
        struct Node* current = head;
        do {
            printf("%d -> ", current->data);
            current = current->next;
        } while (current != head);
        printf("(head)\n");
    }
}

// Function to delete the entire circular linked list
void deleteList(struct Node** head) {
    struct Node* current = *head;
    struct Node* nextNode;

    if (*head == NULL) {
        return; // List is already empty
    }

    do {
        nextNode = current->next;
        free(current);
        current = nextNode;
    } while (current != *head);

    *head = NULL; // Set the head to NULL after deleting all nodes
}